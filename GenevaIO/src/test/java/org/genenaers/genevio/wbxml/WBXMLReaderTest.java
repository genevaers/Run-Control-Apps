/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.genenaers.genevio.wbxml;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileReader;

/*
 * Copyright Contributors to the GenevaERS Project. SPDX-License-Identifier: Apache-2.0 (c) Copyright IBM Corporation 2008.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Iterator;
import java.util.logging.Level;

import com.google.common.flogger.FluentLogger;

import org.genevaers.genevaio.wbxml.RecordParser;
import org.genevaers.genevaio.wbxml.WBXMLSaxIterator;
import org.genevaers.utilities.GenevaLog;
import org.genevaers.repository.Repository;
import org.genevaers.repository.components.ControlRecord;
import org.genevaers.repository.components.LRField;
import org.genevaers.repository.components.LogicalRecord;
import org.genevaers.repository.components.LookupPath;
import org.genevaers.repository.components.ReportFooter;
import org.genevaers.repository.components.ReportHeader;
import org.genevaers.repository.components.ViewColumnSource;
import org.genevaers.repository.components.ViewNode;
import org.genevaers.repository.components.ViewSource;
import org.genevaers.repository.components.enums.DataType;
import org.genevaers.repository.components.enums.OutputMedia;
import org.genevaers.repository.components.enums.ViewType;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;

public class WBXMLReaderTest {
    private static final FluentLogger logger = FluentLogger.forEnclosingClass();
    public static final String TEST_FILE = "mergeAssAll.xml";
    public static final String ARITH_FILE = "CMP_ARITH_PLUS.xml";
    public static final String HEADER_FOOTER_FILE = "HeadersFooters[12088].xml";
    public static final String OLD_TEST_FILE = "oldpass2.xml";
    public static final String EXIT_FILE = "comkyp.xml";
    static final String resources = "./src/test/resources/";

    @BeforeEach
    public void initEach(TestInfo info){
        Repository.clearAndInitialise();
        RecordParser.clearAndInitialise();
        java.nio.file.Path target = Paths.get("target/test-logs/");
        target.toFile().mkdirs();
        GenevaLog.initLogger(WBXMLReaderTest.class.getName(), target.resolve(info.getDisplayName()).toString(), Level.FINE);
    }

    @AfterEach
    public void afterEach(TestInfo info){
		GenevaLog.closeLogger(WBXMLReaderTest.class.getName());
    }


    @Test
    public void testWBXMLCatalog() throws Exception {
        WBXMLSaxIterator wbxmlReader = new WBXMLSaxIterator();
        Path root = Paths.get(resources);
        Path readme = root.resolve(ARITH_FILE);

        addFileToRepo(wbxmlReader, readme);
        assertEquals(61, wbxmlReader.getCatalogEntries().size());
    }

    @Test
    public void testOpenWBXMLFile() throws Exception {
        WBXMLSaxIterator wbxmlReader = new WBXMLSaxIterator();
        Path root = Paths.get(resources);
        Path readme = root.resolve(ARITH_FILE);
        addFileToRepo(wbxmlReader, readme);

        assertEquals(2, Repository.getViews().size());
        ViewNode v1 = Repository.getViews().get(11288);
        ViewNode v2 = Repository.getViews().get(11589);
        assertEquals(ViewType.EXTRACT, v1.getViewDefinition().getViewType());
        assertEquals("CMP_ARITH_PLUS", v1.getViewDefinition().getName());
        assertEquals(OutputMedia.FILE, v1.getViewDefinition().getOutputMedia());
        assertEquals(ViewType.DETAIL, v2.getViewDefinition().getViewType());
    }

    @Test
    public void testExitFile() throws Exception {
        WBXMLSaxIterator wbxmlReader = new WBXMLSaxIterator();
        Path root = Paths.get(resources);
        Path readme = root.resolve(EXIT_FILE);

        addFileToRepo(wbxmlReader, readme);
        assertEquals(2, Repository.getUserExits().size());
    }

    @Test
    public void testCRGenerated() {
        WBXMLSaxIterator wbxmlReader = new WBXMLSaxIterator();
        Path root = Paths.get(resources);
        Path readme = root.resolve(ARITH_FILE);
        addFileToRepo(wbxmlReader, readme);

        assertEquals(2, Repository.getViews().size());
        assertEquals(1, Repository.getControlRecords().size());
        assertEquals("DefaultInstall", ((ControlRecord) Repository.getControlRecords().get(1)).getName());
        assertEquals(12, ((ControlRecord) Repository.getControlRecords().get(1)).getEndingPeriod());
        assertEquals("MR91 Generated", ((ControlRecord) Repository.getControlRecords().get(1)).getDescription());
    }

    private void addFileToRepo(WBXMLSaxIterator wbxmlReader, Path readme) {
        try(FileReader fr = new FileReader(readme.toFile())) {
            wbxmlReader.setInputReader(fr);
            wbxmlReader.addToRepsitory();
        } catch (Exception e) {
            logger.atSevere().log("Failed to addToRepository\n%s", e.getMessage());
        }
    }

    @Test
    public void testViewSource() throws Exception {
        WBXMLSaxIterator wbxmlReader = new WBXMLSaxIterator();
        Path root = Paths.get(resources);
        Path readme = root.resolve(ARITH_FILE);
        addFileToRepo(wbxmlReader, readme);

        ViewNode v1 = Repository.getViews().get(11288);
        assertEquals(6, v1.getNumberOfViewSources());
        ViewSource vs = v1.getViewSource((short) 3);
        assertEquals("WRITE(SOURCE=DATA,DEST=FILE={PACKED_PLUS.PACKED_PLUS_PIPE})", vs.getExtractOutputLogic());
        assertEquals(10233, vs.getSourceLFID());
        ViewNode v2 = Repository.getViews().get(11589);
        assertEquals(1, v2.getNumberOfViewSources());
        ViewSource vs2 = v2.getViewSource((short) 1);
        assertEquals("WRITE(SOURCE=VIEW,DEST=EXT=001)", vs2.getExtractOutputLogic());
        assertNotNull(Repository.getLogicalRecords().get(1595));
        assertNotNull(Repository.getLogicalFiles().get(10228));
    }

    @Test
    public void testViewColumns() throws Exception {
        WBXMLSaxIterator wbxmlReader = new WBXMLSaxIterator();
        Path root = Paths.get(resources);
        Path readme = root.resolve(ARITH_FILE);
        addFileToRepo(wbxmlReader, readme);

        ViewNode v1 = Repository.getViews().get(11288);
        assertEquals(28, v1.getNumberOfColumns());
        Iterator<ViewColumnSource> vcsByNum = v1.getColumnNumber(3).getIteratorForSourcesByNumber();
        int num = 1;
        while (vcsByNum.hasNext()) {
            ViewColumnSource vcs = vcsByNum.next();
            if (num == 1) {
                assertEquals("COLUMN = \"A=\"", vcs.getLogicText());
            }
            if (num == 6) {
                assertEquals("COLUMN = \"X=\"", vcs.getLogicText());
            }
            num++;
        }
    }

    @Test
    public void testViewSortKeys() throws Exception {
        WBXMLSaxIterator wbxmlReader = new WBXMLSaxIterator();
        Path root = Paths.get(resources);
        Path readme = root.resolve(ARITH_FILE);
        addFileToRepo(wbxmlReader, readme);

        ViewNode v1 = Repository.getViews().get(11589);
        assertEquals(2, v1.getNumberOfSortKeys());
    }

    @Test
    public void testLookups() throws Exception {
        WBXMLSaxIterator wbxmlReader = new WBXMLSaxIterator();
        Path root = Paths.get(resources);
        Path readme = root.resolve(ARITH_FILE);
        addFileToRepo(wbxmlReader, readme);

        assertEquals(1, Repository.getLookups().size());
        LookupPath lk = Repository.getLookups().get(2849);
        assertEquals("AllTypesLookup", lk.getName()); 
        int targLRid = lk.getTargetLRID();
        assertEquals(1801, targLRid);
        assertEquals("AllTypesLookup", Repository.getLogicalRecords().get(targLRid).getName());
        assertEquals(1670, lk.getTargetLFID());
        assertEquals(1, lk.getNumberOfSteps());
        assertEquals(1, Repository.getLookups().get(2849).getStep(1).getNumberOfKeys());
        int srcLRid = Repository.getLookups().get(2849).getStep(1).getSourceLR();
        assertEquals(1595, srcLRid);
        assertEquals("AllTypes", Repository.getLogicalRecords().get(srcLRid).getName());
    }

    @Test
    public void testPFs() throws Exception {
        WBXMLSaxIterator wbxmlReader = new WBXMLSaxIterator();
        Path root = Paths.get(resources);
        Path readme = root.resolve(ARITH_FILE);
        addFileToRepo(wbxmlReader, readme);

        assertEquals(5, Repository.getPhysicalFiles().size());
    }

    @Test
    public void testLRFields() throws Exception {
        WBXMLSaxIterator wbxmlReader = new WBXMLSaxIterator();
        Path root = Paths.get(resources);
        Path readme = root.resolve(ARITH_FILE);
        addFileToRepo(wbxmlReader, readme);

        LogicalRecord lr = Repository.getLogicalRecords().get(1595);
        assertNotNull(lr);
        assertEquals(19, lr.getValuesOfFieldsByID().size());
        LRField f = lr.findFromFieldsByID(90920);
        assertNotNull(f);
        assertEquals("Binary1", f.getName());
        assertNotNull(lr.findFromFieldsByName("Binary4"));
        assertEquals(DataType.BINARY, f.getDatatype());
        assertEquals(1, f.getLength());
    }

    @Test
    public void testLRIndexFields() throws Exception {
        WBXMLSaxIterator wbxmlReader = new WBXMLSaxIterator();
        Path root = Paths.get(resources);
        Path readme = root.resolve(ARITH_FILE);
        addFileToRepo(wbxmlReader, readme);

        LogicalRecord lr = Repository.getLogicalRecords().get(1801);
        assertNotNull(lr);
        assertEquals(1, lr.getValuesOfIndexBySeq().size());
        assertEquals(96888, lr.getIteratorForIndexBySeq().next().getFieldID());
    }

    @Test
    public void testHeaderAndFooters() throws Exception {
        WBXMLSaxIterator wbxmlReader = new WBXMLSaxIterator();
        Path root = Paths.get(resources);
        Path readme = root.resolve(HEADER_FOOTER_FILE);
        addFileToRepo(wbxmlReader, readme);

        ViewNode v = Repository.getViews().get(12088);
		assertTrue(v.hasReportHeaders());
		Iterator<ReportHeader> hi = v.getHeadersIterator();
		ReportHeader h = hi.next();
		assertEquals(1, h.getRow());
		assertTrue(v.hasReportFooters());
		Iterator<ReportFooter> fi = v.getFootersIterator();
		ReportFooter f = fi.next();
		assertEquals(1, f.getRow());
    }

}
