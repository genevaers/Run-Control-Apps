<#ftl strip_whitespace="true">
package ${packageName};

/**
 * This class was automatically generated by the GenevaERS Component Generator.
 * 
 * DO NOT EDIT
 * 
 */

import java.util.HashMap;
import java.util.Map;

public enum ${enumName} {

<#list enumEntry.equates as e>
    ${e?upper_case}("${e}", "${enumEntry.dbcodes[e?index]}")<#if e?has_next>,<#else>;</#if> 
</#list>

    private final String value;
    private final String dbcode;
    private final static Map<String, ${enumName}> CONSTANTS = new HashMap<>();
    private final static Map<String, ${enumName}> DBCONSTANTS = new HashMap<>();

    static {
        for (${enumName} c: values()) {
            CONSTANTS.put(c.value, c);
        }
        for (${enumName} c: values()) {
            DBCONSTANTS.put(c.dbcode, c);
        }
    }

    private ${enumName}(String value, String dbcode) {
        this.value = value;
        this.dbcode = dbcode;
    }

    @Override
    public String toString() {
        return this.value;
    }

    public String value() {
        return this.value;
    }

    public String dbcode() {
        return this.dbcode;
    }

    public static ${enumName} fromValue(String value) {
        ${enumName} constant = CONSTANTS.get(value);
        if (constant == null) {
            throw new IllegalArgumentException(value);
        } else {
            return constant;
        }
    }

    public static ${enumName} fromdbcode(String code) {
        ${enumName} constant = DBCONSTANTS.get(code.trim());
        if (constant == null) {
            throw new IllegalArgumentException(code);
        } else {
            return constant;
        }
    }
}
