/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.genevaers.runcontrolgenerator;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Iterator;
import java.util.logging.Level;

import org.genevaers.compilers.extract.astnodes.ExtractAST2Dot;
import org.genevaers.genevaio.dbreader.DatabaseConnection.DbType;
import org.genevaers.genevaio.dbreader.DatabaseConnection;
import org.genevaers.genevaio.dbreader.DatabaseConnectionParams;
import org.genevaers.genevaio.dbreader.PostgresConnection;
import org.genevaers.genevaio.ltfactory.LtFactoryHolder;
import org.genevaers.genevaio.ltfile.LTLogger;
import org.genevaers.genevaio.ltfile.LogicTable;
import org.genevaers.genevaio.wbxml.RecordParser;
import org.genevaers.repository.Repository;
import org.genevaers.repository.components.ViewColumnSource;
import org.genevaers.repository.components.ViewNode;
import org.genevaers.repository.components.ViewSource;
import org.genevaers.repository.components.enums.ColumnSourceType;
import org.genevaers.repository.components.enums.DataType;
import org.genevaers.repository.components.enums.DateCode;
import org.genevaers.repository.components.enums.ExtractArea;
import org.genevaers.repository.components.enums.JustifyId;
import org.genevaers.repository.components.enums.ViewType;
import org.genevaers.repository.data.CompilerMessageSource;
import org.genevaers.repository.data.ViewLogicDependency.LogicType;
import org.genevaers.runcontrolgenerator.compilers.ExtractPhaseCompiler;
import org.genevaers.runcontrolgenerator.configuration.RunControlConfigration;
import org.genevaers.runcontrolgenerator.workbenchinterface.ColumnData;
import org.genevaers.runcontrolgenerator.workbenchinterface.LRData;
import org.genevaers.runcontrolgenerator.workbenchinterface.LRFieldData;
import org.genevaers.runcontrolgenerator.workbenchinterface.RCDriver;
import org.genevaers.runcontrolgenerator.workbenchinterface.ViewColumnSourceData;
import org.genevaers.runcontrolgenerator.workbenchinterface.ViewData;
import org.genevaers.runcontrolgenerator.workbenchinterface.ViewSourceData;
import org.genevaers.runcontrolgenerator.workbenchinterface.WBCompilerFactory;
import org.genevaers.runcontrolgenerator.workbenchinterface.WBCompilerType;
import org.genevaers.runcontrolgenerator.workbenchinterface.WBExtractColumnCompiler;
import org.genevaers.runcontrolgenerator.workbenchinterface.WBExtractFilterCompiler;
import org.genevaers.runcontrolgenerator.workbenchinterface.WBExtractOutputCompiler;
import org.genevaers.runcontrolgenerator.workbenchinterface.WBFormatCalculationCompiler;
import org.genevaers.runcontrolgenerator.workbenchinterface.WBFormatFilterCompiler;
import org.genevaers.runcontrolgenerator.workbenchinterface.WorkbenchCompiler;
import org.genevaers.utilities.GenevaLog;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;

/*
 * Copyright Contributors to the GenevaERS Project. SPDX-License-Identifier: Apache-2.0 (c) Copyright IBM Corporation 2008.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;

import com.google.common.flogger.FluentLogger;

  /* 
   * !!!!!  READ ME !!!!!!!!!!!!!
   * 
   * Test the workbench calling the RunControlGenerator
   * 
   * By default the tests are Disabled. 
   * Remove/comment out the Disabled tag to run
   * 
   * !!!!!  READ ME !!!!!!!!!!!!!
   */
  class WBRCGTest extends RunCompilerBase {
  private static final FluentLogger logger = FluentLogger.forEnclosingClass();
  private int environmentid;
  private int lrid;
  private int lfid;
  private Path reportPath;
  private static int vcsdNum = 1;

  private static final String TEST_ENVIRONMENT = "5";
  private static final int TEST_ENVIRONMENT_NUM = 7;
  private static final int TEST_VIEW_NUM = 12044;

  @BeforeEach
  public void initEach(TestInfo info) {
    new RunControlConfigration();
    Repository.setGenerationTime(Calendar.getInstance().getTime());
    RecordParser.clearAndInitialise();
    LtFactoryHolder.getLtFunctionCodeFactory().clearAccumulatorMap();
    java.nio.file.Path target = Paths.get("target/test-logs/");
    reportPath = Paths.get("target/WEReports/passes/WBRunRCG");
    target.toFile().mkdirs();
    GenevaLog.initLogger(RunCompilerTest.class.getName(), target.resolve(info.getDisplayName()).toString(), Level.FINE);

    WorkbenchCompiler.reset();
    DatabaseConnectionParams params = getPostgresParams();
    params.setEnvironmentID(TEST_ENVIRONMENT);
    WorkbenchCompiler.setSQLConnection(getTestDatabaseConnection(params));
    WorkbenchCompiler.setSchema("gendev");
    WorkbenchCompiler.setEnvironment(TEST_ENVIRONMENT_NUM);
  }

  @AfterEach
  public void afterEach(TestInfo info) {
    GenevaLog.closeLogger(WBCompilerTest.class.getName());
  }

  // @Test   @Disabled
  // void testWBRunRCG() throws IOException {
  //   DatabaseConnectionParams params = getPostgresParams();
  //   params.setEnvironmentID(TEST_ENVIRONMENT);
  //   RCDriver.addViewsToConfig("12155,12156");
  //   RCDriver.setSQLConnection(getTestDatabaseConnection(params));
  //   RCDriver.setEnvironmentID(TEST_ENVIRONMENT);
  //   RCDriver.setSchema("gendev");
  //   RCDriver.setOutputPath(reportPath);
  //   RCDriver.runRCG();
  //   RCDriver.runRGA(reportPath);

  // }

  public static DatabaseConnectionParams getPostgresParams() {
    DatabaseConnectionParams params = new DatabaseConnectionParams();
    params.setDbType(DbType.POSTGRES);
    params.setDatabase("genevaers");
    params.setPort("5432");
    params.setSchema("gendev");
    params.setServer("localhost");
    params.setUsername("postgres");
    params.setPassword("postgres");
    return params;
  }

  public static Connection getTestDatabaseConnection(DatabaseConnectionParams params) {
    DatabaseConnection pgCon = new PostgresConnection(params);
    try {
      pgCon.connect();
    } catch (SQLException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    return pgCon.getConnection();
  }

}
