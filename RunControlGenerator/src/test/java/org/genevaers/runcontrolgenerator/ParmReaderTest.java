/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.genevaers.runcontrolgenerator;

/*
 * Copyright Contributors to the GenevaERS Project. SPDX-License-Identifier: Apache-2.0 (c) Copyright IBM Corporation 2008.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.IOException;

import org.genevaers.runcontrolgenerator.configuration.RunControlConfigration;
import org.genevaers.utilities.ParmReader;

public class ParmReaderTest {

    @Test public void testReadParm() throws IOException {
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertEquals(ParmReader.PARM_RESULT.OK,  pr.getResult());
    }

    @Test public void testWBXMLInput() throws IOException {
        TestHelper.writeToParm(RunControlConfigration.INPUT_TYPE + "=WBXML\n");
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertEquals("WBXML", rcc.getInputType());
    }

    @Test public void testWBXMLInputWithComment() throws IOException {
        TestHelper.writeToParm(RunControlConfigration.INPUT_TYPE + "=WBXML     #Cam be WBXML, DB2, VDPXML\n");
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertEquals("WBXML", rcc.getInputType());
    }

    @Test public void testWBXMLInputWithIgnoreParm() throws IOException {
        TestHelper.writeToParm("Banana=WBXML     #Cam be WBXML, DB2, VDPXML\n");
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertEquals(ParmReader.PARM_RESULT.WARN_IGNORED,  pr.getResult());
    }

    @Test public void testSetRCOutputFromValidInput() throws IOException {
        TestHelper.writeToParm(RunControlConfigration.INPUT_TYPE + "=WBXML\n"
        +   RunControlConfigration.OUTPUT_RUN_CONTROL_FILES + "=Y\n");
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertEquals(ParmReader.PARM_RESULT.OK,  pr.getResult());
    }
    @Test public void testSetWBXMLOutputFromValidInput() throws IOException {
        TestHelper.writeToParm(RunControlConfigration.INPUT_TYPE + "=WBXML\n"
        +   RunControlConfigration.OUTPUT_WB_XML_FILES + "=Y\n");
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertEquals(ParmReader.PARM_RESULT.OK,  pr.getResult());
    }
    @Test public void testSetVDPXMLOutputFromValidInput() throws IOException {
        TestHelper.writeToParm(RunControlConfigration.INPUT_TYPE + "=WBXML\n"
        +   RunControlConfigration.OUTPUT_VDP_XML_FILE+ "=Y\n");
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertEquals(ParmReader.PARM_RESULT.OK,  pr.getResult());
    }

    @Test public void testNoOutputFromValidInput() throws IOException {
        TestHelper.writeToParm(RunControlConfigration.INPUT_TYPE + "=WBXML\n\n");
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertFalse(rcc.isValid());
    }

    @Test public void testRCOutFromValidInput() throws IOException {
        TestHelper.writeToParm(RunControlConfigration.INPUT_TYPE + "=WBXML\n"
        +   RunControlConfigration.OUTPUT_RUN_CONTROL_FILES + "=Y\n");
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertTrue(rcc.isValid());
        assertTrue(rcc.isOutputRC());
        assertFalse(rcc.isWriteVDPXML());
        assertFalse(rcc.isWriteVDPXML());
    }

    @Test public void testWBXMLOutFromValidInput() throws IOException {
        TestHelper.writeToParm(RunControlConfigration.INPUT_TYPE + "=WBXML\n"
        +   RunControlConfigration.OUTPUT_WB_XML_FILES + "=Y\n");
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertTrue(rcc.isValid());
    }

    @Test public void testVDPXMLOutFromValidInput() throws IOException {
        TestHelper.writeToParm(RunControlConfigration.INPUT_TYPE + "=WBXML\n"
        +   RunControlConfigration.OUTPUT_VDP_XML_FILE + "=Y\n");
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertTrue(rcc.isValid());
    }

}
