/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.genevaers.runcontrolgenerator;

/*
 * Copyright Contributors to the GenevaERS Project. SPDX-License-Identifier: Apache-2.0 (c) Copyright IBM Corporation 2008.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.IOException;
import java.util.Set;

import org.genevaers.runcontrolgenerator.configuration.RunControlConfigration;
import org.genevaers.utilities.IdsReader;
import org.genevaers.utilities.ParmReader;
import org.genevaers.utilities.IdsReader.IDS_RESULT;

public class ParmReaderTest {

    @Test public void testReadParm() throws IOException {
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertEquals(ParmReader.PARM_RESULT.OK,  pr.getResult());
    }

    @Test public void testWBXMLInput() throws IOException {
        TestHelper.writeToParm(RunControlConfigration.INPUT_TYPE + "=WBXML\n");
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertEquals("WBXML", rcc.getInputType());
    }

    @Test public void testWBXMLInputWithComment() throws IOException {
        TestHelper.writeToParm(RunControlConfigration.INPUT_TYPE + "=WBXML     #Cam be WBXML, DB2, VDPXML\n");
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertEquals("WBXML", rcc.getInputType());
    }

    @Test public void testWBXMLInputWithIgnoreParm() throws IOException {
        TestHelper.writeToParm("Banana=WBXML     #Cam be WBXML, DB2, VDPXML\n");
        ParmReader pr = new ParmReader();
        RunControlConfigration rcc = new RunControlConfigration();
        //Maybe allow overwrite from args later
        pr.setConfig(rcc);
        pr.populateConfigFrom(TestHelper.getTestParmName());
        assertEquals(ParmReader.PARM_RESULT.WARN_IGNORED,  pr.getResult());
    }

    @Test public void testIdReader() throws IOException {
        TestHelper.writeToIds("#Comment only\n"
        + "123,345   ignore this comment\n"
        + "*Another comment this time with a star\n"
        + "678\n"
        + "90,25\n");
        IdsReader idr = new IdsReader();
        Set<Integer> ids = idr.getIdsFrom(TestHelper.TEST_DBVIEWS);
        assertEquals(ids.size(),  5);
        assertTrue(ids.contains(123));
        assertTrue(ids.contains(345));
        assertTrue(ids.contains(25));
        assertEquals(IDS_RESULT.OK, idr.getResult());
    }


}
